Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-11-05T22:30:09+08:00

====== Thread 介绍2 ======
Created Thursday 05 November 2015

Thread今天看了mesh网络建立部分，主要是如何加入网络，找到父节点，并且通过父节点分配相应的网络信息，这样才能建立起thread网络。
这样建立有个问题：如果开始网络节点很多，或者网络刚刚上电启动，这样网络中这种消息很多，可能会丢掉一些这种消息，可能网络节点无法正确或者有效接入网络中间。解决方式是在启动时尽量沿用NRAM中的内容，优先检查NRAM中的父节点是否存在，但是这样的话父节点 router可能构成瓶颈，如果子节点很多的时候。
同时link cost原则上尽量选用最佳的邻居作为自己的父节点，这样可以尽量保证父节点的稳定性。同时在做节点link假设时认为两个方向之间不再对称，这样比zigbee更近了一步，这也是符合网络实际的。但是需要注意的是这有两个潜在的问题：
1，由于需要维护双向链路，因此网络之间流量会比较大，这样会增加网络额外的管理成本。
2, 通过目前zigbee网络测试可以发现，即使没有外部干扰，无线系统是一个自干扰的系统。因此随着网络流量的增加，他的link也可能变得没有以前稳定。那么也就有变化link cost的可能性。
但是按照现有结构来说，不对称双向链路更加符合实际。当然对称双向链路主要适合网络链路比较稳定的情况或者对于网络空口链路不敏感的情况。例如网络流量很低，并且节点工作固定，不发生移动。另外或者是传感器网络，因此对于丢包率不敏感。
不对称网络链路可以更有效的面对外围干扰，当然我们可以通过增加发送管理包时间间隔来减少网络管理包的流量。
另外ZigBee存在一个问题：广播的时候全网泛滥，就像洪水泛滥，这样增加了网络多余包，因此增加了网络额外负荷，同时也增加了广播的时延。这种时延在比较广泛的网络中，甚至可能导致广播回环，即一个广播本来一般在网络中存在5s，由于个别包在5s后还是存在网络中，导致原来已经转播过这个包的节点认为这是一个新的广播，然后又重新发送，这样导致广播回环，以致一个广播可能在网络中存在20s左右。
thread相比之下，他通过trickle的机制，以及reed抑制广播泛滥，减少不必要的广播包，这样避免不必要的包发送，因此这个问题等到有效抑制。
如何有效的建立网络，并且网络初始化时如何高效安全的配置是一个永久的话题，需要结合具体的应用，分析最合适的方案出来。
Tread这一套就好像zigbee寻找父节点差不多，而且他也会根据邻居表中信号最好的那个节点，而且它采用单播方式，而不是ZIgBee 的link status这样的广播方式。从本质上来说，感觉ZigBee更高效一些，避免和周边每个节点沟通，Thread有个好处是说他的包长固定，不会过长以至于需要分包。

